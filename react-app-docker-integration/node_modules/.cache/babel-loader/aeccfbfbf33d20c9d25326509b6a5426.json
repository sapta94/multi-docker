{"ast":null,"code":"import _classCallCheck from\"/Users/saptarshidey/Documents/multi/react-app-docker-integration/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/saptarshidey/Documents/multi/react-app-docker-integration/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/saptarshidey/Documents/multi/react-app-docker-integration/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/saptarshidey/Documents/multi/react-app-docker-integration/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/saptarshidey/Documents/multi/react-app-docker-integration/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Bar,Line,Pie}from\"react-chartjs-2\";import _ from\"underscore\";var ChartView=/*#__PURE__*/function(_Component){_inherits(ChartView,_Component);function ChartView(props){var _this;_classCallCheck(this,ChartView);_this=_possibleConstructorReturn(this,_getPrototypeOf(ChartView).call(this,props));_this.handleChange=function(type){_this.setState({type:type},function(){_this.modifyData();});};_this.modifyData=function(){var data=_this.props.pollutionData||[];var values=[],lables=[];data.forEach(function(item,ind){lables.push(item.city.name.split(' ')[0]);values.push(item.aqi);});var graphData={};graphData.labels=lables;if(_this.state.type=='bar')graphData.datasets=[{label:'AQI',backgroundColor:'rgba(255,99,132,0.2)',borderColor:'rgba(255,99,132,1)',borderWidth:1,hoverBackgroundColor:'rgba(255,99,132,0.4)',hoverBorderColor:'rgba(255,99,132,1)',data:values}];else if(_this.state.type=='line'){graphData.datasets=[{label:'AQI',fill:false,lineTension:0.1,backgroundColor:'rgba(75,192,192,0.4)',borderColor:'rgba(75,192,192,1)',borderCapStyle:'butt',borderDash:[],borderDashOffset:0.0,borderJoinStyle:'miter',pointBorderColor:'rgba(75,192,192,1)',pointBackgroundColor:'#fff',pointBorderWidth:1,pointHoverRadius:5,pointHoverBackgroundColor:'rgba(75,192,192,1)',pointHoverBorderColor:'rgba(220,220,220,1)',pointHoverBorderWidth:2,pointRadius:1,pointHitRadius:10,data:values}];}else{graphData.datasets=[{data:values,backgroundColor:['#FF6384','#36A2EB','#FFCE56'],hoverBackgroundColor:['#FF6384','#36A2EB','#FFCE56']}];}_this.setState({graphData:graphData});};_this.state={graphData:{},type:'bar'};return _this;}_createClass(ChartView,[{key:\"componentDidMount\",value:function componentDidMount(){this.modifyData();}},{key:\"componentDidUpdate\",value:function componentDidUpdate(oldProps){if(!_.isEqual(oldProps,this.props)){this.modifyData();}}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(\"div\",{className:\"row graph-card\"},React.createElement(\"h3\",{style:{marginLeft:'0.3 rem'}},\"Results\"),React.createElement(\"div\",{className:\"graphType\"},React.createElement(\"label\",null,React.createElement(\"input\",{onChange:function onChange(){return _this2.handleChange('bar');},type:\"radio\",class:\"radio-inline\",name:\"graph-type\"}),\" Bar\"),React.createElement(\"label\",null,React.createElement(\"input\",{onChange:function onChange(){return _this2.handleChange('line');},type:\"radio\",class:\"radio-inline\",name:\"graph-type\"}),\" Line\"),React.createElement(\"label\",null,React.createElement(\"input\",{onChange:function onChange(){return _this2.handleChange('pie');},type:\"radio\",class:\"radio-inline\",name:\"graph-type\"}),\" Pie\")),this.state.type=='bar'?React.createElement(Bar,{data:this.state.graphData,width:100,height:50,options:{maintainAspectRatio:true}}):this.state.type=='line'?React.createElement(Line,{data:this.state.graphData}):React.createElement(Pie,{data:this.state.graphData}));}}]);return ChartView;}(Component);export default ChartView;","map":{"version":3,"sources":["/Users/saptarshidey/Documents/multi/react-app-docker-integration/src/components/chart-view.js"],"names":["React","Component","Bar","Line","Pie","_","ChartView","props","handleChange","type","setState","modifyData","data","pollutionData","values","lables","forEach","item","ind","push","city","name","split","aqi","graphData","labels","state","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","oldProps","isEqual","marginLeft","maintainAspectRatio"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Bar,Line,Pie} from \"react-chartjs-2\";\nimport _ from \"underscore\"\nclass ChartView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            graphData:{},\n            type:'bar'\n         };\n    }\n    componentDidMount(){\n        this.modifyData()\n    }\n\n    componentDidUpdate(oldProps){\n        if(!_.isEqual(oldProps,this.props)){\n            this.modifyData()\n        }\n    }\n\n    handleChange=(type)=>{\n        this.setState({\n            type:type\n        },()=>{\n            this.modifyData()\n        })\n    }\n\n    modifyData=()=>{\n        var data=this.props.pollutionData||[];\n        var values=[],lables=[]\n        data.forEach((item,ind)=>{\n            lables.push((item.city.name).split(' ')[0])\n            values.push(item.aqi)\n        })\n        let graphData={}\n        graphData.labels = lables\n        if(this.state.type=='bar')\n            graphData.datasets = [\n                {\n                    label: 'AQI',\n                    backgroundColor: 'rgba(255,99,132,0.2)',\n                    borderColor: 'rgba(255,99,132,1)',\n                    borderWidth: 1,\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n                    hoverBorderColor: 'rgba(255,99,132,1)',\n                    data: values\n                }\n            ]\n        else if(this.state.type=='line'){\n            graphData.datasets= [\n                {\n                  label: 'AQI',\n                  fill: false,\n                  lineTension: 0.1,\n                  backgroundColor: 'rgba(75,192,192,0.4)',\n                  borderColor: 'rgba(75,192,192,1)',\n                  borderCapStyle: 'butt',\n                  borderDash: [],\n                  borderDashOffset: 0.0,\n                  borderJoinStyle: 'miter',\n                  pointBorderColor: 'rgba(75,192,192,1)',\n                  pointBackgroundColor: '#fff',\n                  pointBorderWidth: 1,\n                  pointHoverRadius: 5,\n                  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                  pointHoverBorderColor: 'rgba(220,220,220,1)',\n                  pointHoverBorderWidth: 2,\n                  pointRadius: 1,\n                  pointHitRadius: 10,\n                  data: values\n                }\n              ]\n        } else{\n            graphData.datasets= [{\n                data: values,\n                backgroundColor: [\n                '#FF6384',\n                '#36A2EB',\n                '#FFCE56'\n                ],\n                hoverBackgroundColor: [\n                '#FF6384',\n                '#36A2EB',\n                '#FFCE56'\n                ]\n            }]\n        }\n        this.setState({graphData:graphData})\n    }\n    render() {\n        return (\n            <div className=\"row graph-card\">\n                <h3 style={{marginLeft:'0.3 rem'}}>Results</h3>\n                <div className='graphType'>\n                    <label><input onChange={()=>this.handleChange('bar')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\"/> Bar</label>\n                    <label><input onChange={()=>this.handleChange('line')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\" /> Line</label>\n                    <label><input onChange={()=>this.handleChange('pie')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\" /> Pie</label>\n                </div>\n                {\n                    (this.state.type=='bar')?\n                    <Bar\n                        data={this.state.graphData}\n                        width={100}\n                        height={50}\n                        options={{\n                            maintainAspectRatio: true\n                        }}\n                    />:(this.state.type=='line')?\n                    <Line data={this.state.graphData} />:<Pie data={this.state.graphData} />\n                }\n                \n            </div>\n        );\n    }\n}\n\nexport default ChartView;"]},"metadata":{},"sourceType":"module"}