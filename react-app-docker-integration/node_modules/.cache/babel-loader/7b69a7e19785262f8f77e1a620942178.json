{"ast":null,"code":"var _jsxFileName = \"/Users/saptarshidey/Documents/multi/react-app-docker-integration/src/components/chart-view.js\";\nimport React, { Component } from 'react';\nimport { Bar, Line, Pie } from \"react-chartjs-2\";\nimport _ from \"underscore\";\n\nclass ChartView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = type => {\n      this.setState({\n        type: type\n      });\n    };\n\n    this.modifyData = type => {\n      var data = this.props.pollutionData || [];\n      var values = [],\n          lables = [];\n      data.forEach((item, ind) => {\n        lables.push(item.city.name.split(' ')[0]);\n        values.push(item.aqi);\n      });\n      let graphData = {};\n      graphData.labels = lables;\n      if (this.state.type == 'bar') graphData.datasets = [{\n        label: 'AQI',\n        backgroundColor: 'rgba(255,99,132,0.2)',\n        borderColor: 'rgba(255,99,132,1)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n        data: values\n      }];else if (this.state.type == 'line') {\n        graphData.datasets = [{\n          label: 'My First dataset',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: values\n        }];\n      }\n      this.setState({\n        graphData: graphData\n      });\n    };\n\n    this.state = {\n      graphData: {},\n      type: 'bar'\n    };\n  }\n\n  componentDidMount() {\n    this.modifyData(this.state.type);\n  }\n\n  componentDidUpdate(oldProps) {\n    if (!_.isEqual(oldProps, this.props)) {\n      this.modifyData(this.state.type);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row graph-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        marginLeft: '0.2 rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Results\"), React.createElement(\"div\", {\n      className: \"graphType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: () => this.handleChange('bar'),\n      type: \"radio\",\n      class: \"radio-inline\",\n      name: \"graph-type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), \" Bar\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: () => this.handleChange('line'),\n      type: \"radio\",\n      class: \"radio-inline\",\n      name: \"graph-type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), \" Line\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: () => this.handleChange('pie'),\n      type: \"radio\",\n      class: \"radio-inline\",\n      name: \"graph-type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), \" Histogram\")), this.state.type == 'bar' ? React.createElement(Bar, {\n      data: this.state.graphData,\n      width: 100,\n      height: 50,\n      options: {\n        maintainAspectRatio: true\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }) : this.state.type == 'line' ? React.createElement(Line, {\n      data: this.state.graphData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }) : React.createElement(Pie, {\n      data: this.state.graphData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ChartView;","map":{"version":3,"sources":["/Users/saptarshidey/Documents/multi/react-app-docker-integration/src/components/chart-view.js"],"names":["React","Component","Bar","Line","Pie","_","ChartView","constructor","props","handleChange","type","setState","modifyData","data","pollutionData","values","lables","forEach","item","ind","push","city","name","split","aqi","graphData","labels","state","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","componentDidMount","componentDidUpdate","oldProps","isEqual","render","marginLeft","maintainAspectRatio"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Bar,Line,Pie} from \"react-chartjs-2\";\nimport _ from \"underscore\"\nclass ChartView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            graphData:{},\n            type:'bar'\n         };\n    }\n    componentDidMount(){\n        this.modifyData(this.state.type)\n    }\n\n    componentDidUpdate(oldProps){\n        if(!_.isEqual(oldProps,this.props)){\n            this.modifyData(this.state.type)\n        }\n    }\n\n    handleChange=(type)=>{\n        this.setState({\n            type:type\n        })\n    }\n\n    modifyData=(type)=>{\n        var data=this.props.pollutionData||[];\n        var values=[],lables=[]\n        data.forEach((item,ind)=>{\n            lables.push((item.city.name).split(' ')[0])\n            values.push(item.aqi)\n        })\n        let graphData={}\n        graphData.labels = lables\n        if(this.state.type=='bar')\n            graphData.datasets = [\n                {\n                    label: 'AQI',\n                    backgroundColor: 'rgba(255,99,132,0.2)',\n                    borderColor: 'rgba(255,99,132,1)',\n                    borderWidth: 1,\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n                    hoverBorderColor: 'rgba(255,99,132,1)',\n                    data: values\n                }\n            ]\n        else if(this.state.type=='line'){\n            graphData.datasets= [\n                {\n                  label: 'My First dataset',\n                  fill: false,\n                  lineTension: 0.1,\n                  backgroundColor: 'rgba(75,192,192,0.4)',\n                  borderColor: 'rgba(75,192,192,1)',\n                  borderCapStyle: 'butt',\n                  borderDash: [],\n                  borderDashOffset: 0.0,\n                  borderJoinStyle: 'miter',\n                  pointBorderColor: 'rgba(75,192,192,1)',\n                  pointBackgroundColor: '#fff',\n                  pointBorderWidth: 1,\n                  pointHoverRadius: 5,\n                  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                  pointHoverBorderColor: 'rgba(220,220,220,1)',\n                  pointHoverBorderWidth: 2,\n                  pointRadius: 1,\n                  pointHitRadius: 10,\n                  data: values\n                }\n              ]\n        }\n        this.setState({graphData:graphData})\n    }\n    render() {\n        return (\n            <div className=\"row graph-card\">\n                <h3 style={{marginLeft:'0.2 rem'}}>Results</h3>\n                <div className='graphType'>\n                    <label><input onChange={()=>this.handleChange('bar')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\"/> Bar</label>\n                    <label><input onChange={()=>this.handleChange('line')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\" /> Line</label>\n                    <label><input onChange={()=>this.handleChange('pie')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\" /> Histogram</label>\n                </div>\n                {\n                    (this.state.type=='bar')?\n                    <Bar\n                        data={this.state.graphData}\n                        width={100}\n                        height={50}\n                        options={{\n                            maintainAspectRatio: true\n                        }}\n                    />:(this.state.type=='line')?\n                    <Line data={this.state.graphData} />:<Pie data={this.state.graphData} />\n                }\n                \n            </div>\n        );\n    }\n}\n\nexport default ChartView;"]},"metadata":{},"sourceType":"module"}