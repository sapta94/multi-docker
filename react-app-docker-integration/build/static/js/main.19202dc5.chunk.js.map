{"version":3,"sources":["components/NavbarMenu.js","components/chart-view.js","components/Home.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["NavbarMenu","Navbar","bg","variant","Brand","href","Nav","className","Link","Component","ChartView","props","handleChange","type","setState","modifyData","data","pollutionData","values","lables","forEach","item","ind","push","city","name","split","aqi","graphData","labels","state","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","this","oldProps","_","isEqual","style","marginLeft","onChange","class","width","height","options","maintainAspectRatio","Home","changeValue","e","index","val","target","value","boxes","handleAdd","onSubmit","token","process","TOKEN","respData","axios","get","then","resp","status","length","catch","err","console","log","margin","map","for","marginTop","cursor","onClick","aria-hidden","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.19202dc5.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport {Navbar,Nav,Button} from 'react-bootstrap';\n\nexport default class NavbarMenu extends Component {\n    render(){\n        return(\n            <Navbar bg=\"light\" variant=\"light\">\n                <Navbar.Brand href=\"#home\">Pollution</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#features\">Recents</Nav.Link>\n                    <Nav.Link href=\"#pricing\">Settings</Nav.Link>\n                </Nav>\n            </Navbar>\n        )\n    }\n}","import React, { Component } from 'react';\nimport {Bar,Line,Pie} from \"react-chartjs-2\";\nimport _ from \"underscore\"\nclass ChartView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            graphData:{},\n            type:'bar'\n         };\n    }\n    componentDidMount(){\n        this.modifyData()\n    }\n\n    componentDidUpdate(oldProps){\n        if(!_.isEqual(oldProps,this.props)){\n            this.modifyData()\n        }\n    }\n\n    handleChange=(type)=>{\n        this.setState({\n            type:type\n        },()=>{\n            this.modifyData()\n        })\n    }\n\n    modifyData=()=>{\n        var data=this.props.pollutionData||[];\n        var values=[],lables=[]\n        data.forEach((item,ind)=>{\n            lables.push((item.city.name).split(' ')[0])\n            values.push(item.aqi)\n        })\n        let graphData={}\n        graphData.labels = lables\n        if(this.state.type=='bar')\n            graphData.datasets = [\n                {\n                    label: 'AQI',\n                    backgroundColor: 'rgba(255,99,132,0.2)',\n                    borderColor: 'rgba(255,99,132,1)',\n                    borderWidth: 1,\n                    hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n                    hoverBorderColor: 'rgba(255,99,132,1)',\n                    data: values\n                }\n            ]\n        else if(this.state.type=='line'){\n            graphData.datasets= [\n                {\n                  label: 'AQI',\n                  fill: false,\n                  lineTension: 0.1,\n                  backgroundColor: 'rgba(75,192,192,0.4)',\n                  borderColor: 'rgba(75,192,192,1)',\n                  borderCapStyle: 'butt',\n                  borderDash: [],\n                  borderDashOffset: 0.0,\n                  borderJoinStyle: 'miter',\n                  pointBorderColor: 'rgba(75,192,192,1)',\n                  pointBackgroundColor: '#fff',\n                  pointBorderWidth: 1,\n                  pointHoverRadius: 5,\n                  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                  pointHoverBorderColor: 'rgba(220,220,220,1)',\n                  pointHoverBorderWidth: 2,\n                  pointRadius: 1,\n                  pointHitRadius: 10,\n                  data: values\n                }\n              ]\n        } else{\n            graphData.datasets= [{\n                data: values,\n                backgroundColor: [\n                '#FF6384',\n                '#36A2EB',\n                '#FFCE56'\n                ],\n                hoverBackgroundColor: [\n                '#FF6384',\n                '#36A2EB',\n                '#FFCE56'\n                ]\n            }]\n        }\n        this.setState({graphData:graphData})\n    }\n    render() {\n        return (\n            <div className=\"row graph-card\">\n                <h3 style={{marginLeft:'0.3 rem'}}>Results</h3>\n                <div className='graphType'>\n                    <label><input onChange={()=>this.handleChange('bar')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\"/> Bar</label>\n                    <label><input onChange={()=>this.handleChange('line')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\" /> Line</label>\n                    <label><input onChange={()=>this.handleChange('pie')} type=\"radio\" class=\"radio-inline\" name=\"graph-type\" /> Pie</label>\n                </div>\n                {\n                    (this.state.type=='bar')?\n                    <Bar\n                        data={this.state.graphData}\n                        width={100}\n                        height={50}\n                        options={{\n                            maintainAspectRatio: true\n                        }}\n                    />:(this.state.type=='line')?\n                    <Line data={this.state.graphData} />:<Pie data={this.state.graphData} />\n                }\n                \n            </div>\n        );\n    }\n}\n\nexport default ChartView;","import React, { Component } from 'react';\nimport {Button} from \"react-bootstrap\"\nimport axios from 'axios'\n\nimport ChartView from \"./chart-view\"\n\n\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            boxes:['',''],\n            pollutionData:[]\n        };\n    }\n    changeValue=(e,index)=>{\n        let val = e.target.value;\n        let boxes = this.state.boxes;\n        boxes[index] = val\n        this.setState({\n            boxes:boxes\n        })\n    }\n    handleAdd = () =>{\n        let boxes = this.state.boxes;\n        boxes.push('')\n        this.setState({\n            boxes:boxes\n        })\n    }\n    onSubmit=()=>{\n        let boxes = this.state.boxes;\n        let token = process.env.TOKEN\n        var respData = []\n        boxes.forEach((item,ind)=>{\n            axios.get('https://api.waqi.info/feed/'+item+'/?token='+token).then((resp)=>{\n                if(resp.data.status=='ok'){\n                  respData.push(resp.data.data)\n                }\n                if(ind==boxes.length-1){\n                    this.setState({\n                        pollutionData:respData\n                    })\n                }\n            }).catch(err=>{\n                console.log(err)\n                return\n            })\n        })\n    }\n    render() {\n        var boxes = this.state.boxes\n        console.log(process.env)\n        return (\n            <div>\n                <div style={{margin:'10px'}} className='row'>\n                    {\n                        boxes.map((item,index)=>{\n                            return(\n                                <div className='col-md-3'>\n                                    <div className=\"form-group\">\n                                        <label for=\"usr\">Enter a city:</label>\n                                        <input type=\"text\" onChange={(e)=>this.changeValue(e,index)} className=\"form-control\" value={item}/>\n                                    </div>\n                                </div>\n                            )\n                        })\n                    }\n                    <i style={{marginTop:'35px',cursor:\"pointer\"}} onClick={()=>this.handleAdd()} class=\"fa fa-plus-circle fa-2x\" aria-hidden=\"true\"></i>\n                </div>\n                <Button variant=\"primary\" onClick={()=>this.onSubmit()}>Submit</Button>\n                {(this.state.pollutionData.length>0)?<ChartView pollutionData={this.state.pollutionData}/>:null}\n            </div>\n            \n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavbarMenu from \"./components/NavbarMenu\"\nimport Home from \"./components/Home\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n          <NavbarMenu/>\n          <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}